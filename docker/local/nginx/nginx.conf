# referenciando o nosso app que tem o nome de api igual no arquivo local.yml
upstream api {
    server api:8000;
}

map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

# aqui referenciamos o front-end igual o nome no arquivo local.yml
upstream client {
    server client:3000;
}

# reverse proxys
# incluindo a escuta na porta 80
# limitando o tamanho do corpo da requisição
# criando log de erros
# definindo as configurações do proxy
server {
    listen 80;

    client_max_body_size 20M;

    error_log /var/log/nginx/error.log error;

    proxy_set_header Host $host;

    proxy_set_header X-Real-IP $remote_addr;

    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_http_version 1.1;

    proxy_set_header Upgrade $http_upgrade;

    proxy_set_header Connection $connection_upgrade;

    location /api/v1 {
        proxy_pass http://api;
        access_log /var/log/nginx/api_access.log;
        error_log /var/log/nginx/api_error.log error;
    }

    location /supersecret {
        proxy_pass http://api;
        access_log /var/log/nginx/admin_access.log;
    }

    location /redoc {
        proxy_pass http://api;
    }

    location /swagger {
        proxy_pass http://api;
    }

    location / {
        proxy_pass http://client;
    }

    # aqui seguimos o STATIC_URL contido dentro do arquivo settings.py do django
    # e a referencia dentro do {} vem do arquivo que seta a localização dos volumes de static do docker, volumes: - ./staticfiles:/app/staticfiles
    # incluindo cache para perfomance em milisegunds
    location /static/ {
        alias /app/staticfiles/;
        expires 30d;

        add_header Cache-Control "public, max-age=2592000";
    }
}